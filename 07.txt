Databases and Rails

Week 07 - Active Record Deep Dive


Recap Of what's happened thus far:
1 Database Backed Models
2 Ruby built views
3 Route = HTTP Verb + URL
   GET: for retrieving data
   POST: for sending data
4 Controller - what redirects and moves the user around the website
  - renders, redirects, filters, formats
  rake routes 
5 With MVC done... we went on to:
  - instance vs class methods
  - JavaScript and jQuery
  - DOM
  - Rails Asset Pipeline (for stylesheets, javascripts, images)

----

____
:::: Lecture 01 - ActiveRecord Query Interface

::: WHERE

User.where(id: 1)           # returns a list
User.where(id: 1).first     # returns the first item in the list
User.where("id = 1")        # using sql syntax

Product.where("price < 5")  # all prices less than 5
Product.where("price <> 5") # not equal to 5

# using wild cards
  # % - match any number of any characters
  # _ - match exactly one character
  
  Product.where("name like '%Auto%'")

# using placeholders with (?)
  Product.where("price in (?)", [1,2,3,4,5])
  Product.where("price not in (?)", [1,2,3,4,5])


::: INCLUDES

# VERY BAD THING:
products = Product.limit(22)
products.each do |p|
  p.user
end
## It will do another SQL query for each record/iteration ... redundant and badly impacts performance!

# You can include a subquery with include(), which retrieves all of the records that are foreign keys in the original table that is queried
products = Product.includes(:user).limit(22)
products.each do |p|
  p.user
end
## this runs SELECT "products".* FROM "products" LIMIT 22
## and then it does SELECT "users".* FROM "users" WHERE "users"."product_id" IN (1,2,...)
## and stores it in memory for quick access


::: FIND
# allows you to find a record by id
user = User.find(1)
## Raises an error if the id does not exist


::: ORDER
# allows you to order your results by a field's value in either descending or ascending order
# use 'ASC' for ascending and 'DESC' for descending

Product.limit(5).order(:price) # in ascending order by default

# get the record with the highest price
  Product.order(:price).last.price          # method 1
  Product.order('price desc').first.price   # method 2


::: LIMIT
# limits the number or records returned

Product.limit(22)

Product.first == Product.limit(1).last

Product.first(10) == Product.limit(10)



::: OFFSET
# Recall...
Product.order('price desc').limit(10) # get the top 10 priciest products in desc order

Product.order('price').limit(10) == Product.order('price').offset(0).limit(10)

# Retrieve the cheapest item
Product.order('price').offset(0).limit(10).first == Product.order('price').limit(10).first

# Retrieve the 10th cheapest item -- !! remember the 0-index base!
Product.order('price').offset(9).first

## Useful for paginating. -- use the paginate gem!


::: JOINS

# consider:
class Product < ActiveRecord::Base
  belongs_to :user
end

class User < ActiveRecord::Base
  has_many :products
end

:: INNER JOIN  (exclusive joins)
# finding all of a user's products...
  prods = Product.joins(:user).where(users: {name: 'john'})
  ## is equivalent to => User.where(name: 'john').first.products

## !! performance tip: use joins instead of multiple queries whenever possible!

# NOTE that rails returns only one half of the (newly joined) table
# the table you start with determines what is returned 
  # e.g. Product.joins returns products.*
  #      User.joins returns users.* 

# inner join is the default join in ActiveRecord as it is the most commonly used one
# why is it called inner join? example:
  # take all the 'users' with an 'id' and all the 'products' with the matching (foreign key) 'user_id' and join them together

# what if we want to find a product with no users?
  prods = Product.where(user_id: nil)
  # easy enough. moving forward...
# what if we want to find a user with no products?
  # not possible with inner joins!
  # inner join CANNOT join a table with another to find non-existent relationships
    # in comes the outer join!

# Since User-Product is a 1-n relationship,
# User.joins(:products).count == Product.count - the number of products without users
# which is equivalent to == Product.joins(:user)
# NOTE the plural :products in the first statement and the singular :user in the second statment. This is due to the 1-n relationship!

:: OUTER JOIN  (inclusive joins)
# can join two tables, including all the records from one table even if it does not have any matches records in the other table

# ex. take all the users and match them up with a product even if no matching product exists
  User.joins("LEFT OUTER JOIN products ON users.id = products.user_id")
  # for the users with no products, the SQL DBMS inserts dummy null values as data for their sole (dummy null) product


# find all the users with no products...
  User.joins("LEFT OUTER JOIN products ON users.id = products.user_id").where(products: {id: nil})



::: GROUP
# we can group things based on a column, returning a hash mapping the groups to their count (frequency)

# ex. group the prices of the products
prods = Product.group(:price).count
# => returns a hash: { price => count }

# NOTE that although we used 'count' with group, we get a hash, not an integer!

# To get the integer count of all the groups, do:
Product.group(:price).all.count
  # or Product.group(:price).count.length

::: HAVING
# Is like WHERE, but looking at groups/functions instead of stored values
# MUST be paired with a group function

# ex. find all product prices that occur more than 3 times
prods = Product.group(:price).having('count(price) > 3')

  # the number of product prices that occur more than 3 times
  prods.all.count

  # the hash grouping of the product prices and their frequencies
  prods.count


## GROUP and HAVING are very useful for analytics
# ex scenario: Users taking courses...
          # how many users take more than 5 courses?

::: DISTINCT
# returns a count of the distinct record/field values

prods.count('DISTINCT(name)')
prods.count(:name, distinct: true)


::: SELECT
# used to select certain fields from the table

User.select("name")
User.joins(:products)

# return an array of distinct Model objects:
User.joins(:products).select("distinct users.name").where("users.id < 5")
User.joins(:products).select("distinct users.name, users.id").where("users.id < 5")

# total = the number of users
  User.count

# a = the number of users with a matching product
  User.joins(:products).select("distinct users.id").count
    #!! careful: using '.count' on a resultset with multiple columns returns wrong value
        # as of Rails 3.2.13 on 2013-07-01
    # for something like: User.joins(:products).select("distinct users.name, users.id")
    # use '.length' instead

# b = the number of users without a matching product
  User.joins("LEFT OUTER JOIN products ON users.id = products.user_id").where(products: {id: nil}).count

# total == a + b


::: PLUCK
# return an array of distinct strings:
User.joins(:products).where("users.id < 5").pluck("DISTINCT users.name")

# Rails 4 apparently supports plucking multiple columns
# Prior to Rails 4, you can do:
User.joins(:products).select("distinct users.name, users.id").where("users.id < 5").map { |e| [e.name, e.id] }



____
:::: Lec 02 - Just-in-Time SQL Queries - Mix'n'Match ActiveRecord Queries

# each method added to a query uses the output of the previous query as input

# when do we call the database?

# LazyLoading - we store the queries and run them as necessary

# building SQL:
  prods = Product.where(price: 5)
  # => we are storing an ActiveRecord::Relation at this point
  prods.class == ActiveRecord::Relation

# methods that act on ActiveRecord::Relations, thus triggering SQL query:
  first(), all(), count(), each(), 

# so we can chain a bunch of methods to create sophisticated ActiveRecord::Relation's
# ex. (none of the following are triggering SQL queries!)
  a = Product.where 'price > 5'
  b = a.where "LOWER(products.name) LIKE '%remote%'"
  c = b.order :created_at
  d = c.limit 55
  e = d.joins :user
  f = e.where(users: {name: 'john'})

# After we've hit the database, the returning value is an Array or object, not a relation
  puts f.first
  puts f.all
  puts f.count
  puts f.each { |record| puts record.something }

# Best to minimize the number of actual Database transactions/queries to optimize performance

____
:::: Lec 03 - Preventing SQL Injection Attacks
# used to attack databases
# there is a vulnerability in your web app that enables users to send bad data to the server and compromise the database

# ex.
  name = 'richard'
  puts "name = '#{name}'"
  # => "name = 'richard'"

  users = User.where("name = '#{name}'")
  puts users.inspect
  # seems fine so far...

  ## let's attack that shit!
  name = "' OR '1' = '1"
  user = User.where("name = '#{name}'")
    # => oh shit!
    # we can close the string with a quote and add arbitrary SQL

# How to protext ourselves?
  # All of the statements we've created so far until the last example were safe to use
  # By default, ActiveRecord protects you (through the ActiveRecord interface)
    # ex. using the hash syntax (always safe)
      name = "' OR '1' = 1"
      User.where(name: name) 
    # It escapes strings before using them
  # If we need to use manual/custom SQL commands, we will use the '(?)'
    # ex.
      name = "' OR '1' = 1"
      user = User.where("name = (?)", name).first
      puts user
      # => nil

#!! BAD:  Using raw user input in our database without inspection
  # Since this is all a pain to deal with yourself, use the ActiveRecord features!

____
:::: Lec 04 - Reading Ruby Documentation

http://ruby-doc.org
- provides documentation with useful examples

ex. Array
http://ruby-doc.org/core-2.0/Array.html

the left sidebar shows its Parent, Methods, and Modules

notice that the parent is Object
Object is actually the root parent of everything.

The methods that begin with '::' are class methods
The methods that begin with '#' are instance methods


# some methods take optional arguments
a = ['a','b','c','d','f','e','f']
a.first
a.first 3

# some methods take optional blocks
a = ['a','b','c','d','f','e','f']
a.count
a.count { |x| x == 'f' }

# the '!' operator on methods
# when you use methods like map!, it will modify the source array
a = ['a','b','c','b']
b = a.map { |x| 'foo:' + x }
puts b.inspect
 # => ["foo:a", "foo:b", "foo:c", "foo:b"]
puts a.inspect
 # => ['a', 'b', 'c', 'b']
a.map! { |x| 'foo:' + x }
puts a.inspect
 # => ["foo:a", "foo:b", "foo:c", "foo:b"]
 
____
:::: EXERCISE

topics:
docs, arrays, testing, activerecord, hashes

Array Methods:
  Array#each
  Array#map
  Array#map!
  Array#reject
  Array#select
  Array#&
  Array#+
  Array#-
  Array#<<
  Array#flatten
  Array#uniq
  Array#compact
  Array#first
  Array#last
  Array#count
  Enumerable#each_with_object

ActiveRecord Methods:
  find
  where
  includes
  order
  limit
  offset
  joins
  group
  having

ActiveRecord Snippets:
  group(:color).count
  where(:id => ids)
  where("condition LIKE (?)", "%good%")
  where("id IN (?)", ids)
  order("created_at ASC")
  order("created_at DESC")
  limit(22)
  first(18)
  limit(2).offset(2)
  joins(:cars).where(:cars => {:top_speed => 55})
  ("AVG(cars.top_speed) >= ?", 5)

Hash Methods:
  Hash#[]
  Hash#[]=
  Hash#keys
  Hash#values
  Hash#delete
  Hash#merge

